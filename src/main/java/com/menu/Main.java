package com.menu;

import com.menu.model.Drink;
import com.menu.model.MenuItem;
import com.menu.model.Toast;
import com.menu.service.MenuService;
import java.util.List;

/**
 * Главный класс приложения для демонстрации работы системы меню.
 * Создает элементы меню, выполняет операции и отображает результаты.
 * 
 * @author Команда проекта Меню
 * @version 1.0
 */
public final class Main {
    
    /**
     * Приватный конструктор для предотвращения создания экземпляров.
     */
    private Main() {
        // Служебный класс - не создавать экземпляры
    }
    
    /**
     * Главный метод, который запускает демонстрационное приложение.
     *
     * @param args аргументы командной строки (не используются)
     */
    public static void main(String[] args) {
        // Создаем сервис меню
        MenuService сервисМеню = new MenuService();
        
        // Создаем и добавляем напитки (цены в бунах)
        сервисМеню.добавитьЭлементМеню(new Drink("Эспрессо", 4.0, 5, true, "Кофе", "Маленький"));
        сервисМеню.добавитьЭлементМеню(new Drink("Капучино", 7.0, 120, false, "Кофе", "Средний"));
        сервисМеню.добавитьЭлементМеню(new Drink("Зеленый чай", 6.0, 0, true, "Чай", "Средний"));
        сервисМеню.добавитьЭлементМеню(new Drink("Апельсиновый сок", 8.0, 110, true, "Сок", "Большой"));
        сервисМеню.добавитьЭлементМеню(new Drink("Соевый латте", 5.0, 90, true, "Кофе", "Средний"));
        сервисМеню.добавитьЭлементМеню(new Drink("Миндальный смузи", 10.0, 180, true, "Смузи", "Большой"));
        
        // Создаем и добавляем тосты (цены в бунах)
        сервисМеню.добавитьЭлементМеню(new Toast("Авокадо тост", 2.0, 320, true, "Цельнозерновой", "Авокадо"));
        сервисМеню.добавитьЭлементМеню(new Toast("Сырный тост", 7.0, 280, false, "Белый", "Сыр"));
        сервисМеню.добавитьЭлементМеню(new Toast("Веганский клуб", 3.0, 420, true, "Мультизерновой", "Тофу и овощи"));
        сервисМеню.добавитьЭлементМеню(new Toast("Томат-Базилик", 6.0, 190, true, "На закваске", "Томаты и базилик"));
        сервисМеню.добавитьЭлементМеню(new Toast("Ветчина-Сыр", 13.0, 350, false, "Ржаной", "Ветчина и сыр"));
        сервисМеню.добавитьЭлементМеню(new Toast("Грибной", 15.0, 290, true, "Цельнозерновой", "Грибы"));
        
        // Отображаем все элементы меню
        отобразитьВсеМеню(сервисМеню);
        
        // Отображаем веганские элементы
        отобразитьВеганскиеЭлементы(сервисМеню);
        
        // Вычисляем и отображаем среднюю стоимость для высококалорийных элементов
        отобразитьСреднююСтоимостьВысококалорийных(сервисМеню);
    }
    
    /**
     * Отображает все элементы меню в системе.
     *
     * @param сервисМеню сервис меню, содержащий элементы
     */
    private static void отобразитьВсеМеню(MenuService сервисМеню) {
        System.out.println("=== ПОЛНОЕ МЕНЮ ===");
        System.out.println("Всего элементов: " + сервисМеню.получитьКоличествоЭлементовМеню());
        System.out.println();
        
        List<MenuItem> всеЭлементы = сервисМеню.получитьВсеЭлементыМеню();
        for (int i = 0; i < всеЭлементы.size(); i++) {
            System.out.println((i + 1) + ". " + всеЭлементы.get(i));
        }
        System.out.println();
    }
    
    /**
     * Отображает все веганские элементы меню.
     *
     * @param сервисМеню сервис меню, содержащий элементы
     */
    private static void отобразитьВеганскиеЭлементы(MenuService сервисМеню) {
        System.out.println("=== ВЕГАНСКИЕ ЭЛЕМЕНТЫ ===");
        
        List<MenuItem> веганскиеЭлементы = сервисМеню.получитьВеганскиеЭлементы();
        if (веганскиеЭлементы.isEmpty()) {
            System.out.println("Веганские элементы отсутствуют.");
        } else {
            System.out.println("Найдено " + веганскиеЭлементы.size() + " веганских элементов:");
            for (int i = 0; i < веганскиеЭлементы.size(); i++) {
                System.out.println((i + 1) + ". " + веганскиеЭлементы.get(i));
            }
        }
        System.out.println();
    }
    
    /**
     * Отображает среднюю стоимость для элементов с калорийностью более 300.
     *
     * @param сервисМеню сервис меню для вычислений
     */
    private static void отобразитьСреднююСтоимостьВысококалорийных(MenuService сервисМеню) {
        final int порогКалорий = 300;
        double средняяСтоимость = сервисМеню.получитьСреднююСтоимостьВысококалорийныхЭлементов(порогКалорий);
        
        System.out.println("=== СРЕДНЯЯ СТОИМОСТЬ ВЫСОКОКАЛОРИЙНЫХ ЭЛЕМЕНТОВ ===");
        System.out.printf("Средняя стоимость элементов с более чем %d калориями: %.2f бун%n", 
                         порогКалорий, средняяСтоимость);
    }
}