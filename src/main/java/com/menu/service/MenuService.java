package com.menu.service;

import com.menu.model.MenuItem;
import java.util.ArrayList;
import java.util.List;

/**
 * Сервисный класс для управления операциями с меню.
 * Предоставляет функциональность для работы с элементами меню, включая фильтрацию и вычисления.
 * 
 * @author Команда проекта Меню
 * @version 1.0
 */
public class MenuService {
    
    private final List<MenuItem> элементыМеню;
    
    /**
     * Создает новый MenuService с пустым меню.
     */
    public MenuService() {
        this.элементыМеню = new ArrayList<>();
    }
    
    /**
     * Добавляет элемент меню в сервис.
     *
     * @param элемент элемент меню для добавления
     * @throws IllegalArgumentException если элемент null
     */
    public void добавитьЭлементМеню(MenuItem элемент) {
        if (элемент == null) {
            throw new IllegalArgumentException("Элемент меню не может быть null");
        }
        элементыМеню.add(элемент);
    }
    
    /**
     * Возвращает все элементы меню.
     *
     * @return список всех элементов меню
     */
    public List<MenuItem> получитьВсеЭлементыМеню() {
        return new ArrayList<>(элементыМеню);
    }
    
    /**
     * Возвращает все веганские элементы меню.
     *
     * @return список веганских элементов меню
     */
    public List<MenuItem> получитьВеганскиеЭлементы() {
        List<MenuItem> веганскиеЭлементы = new ArrayList<>();
        for (MenuItem элемент : элементыМеню) {
            if (элемент.isВеганский()) {
                веганскиеЭлементы.add(элемент);
            }
        }
        return веганскиеЭлементы;
    }
    
    /**
     * Вычисляет среднюю стоимость элементов меню с калорийностью выше указанного значения.
     *
     * @param минКалории минимальный порог калорий
     * @return средняя стоимость высококалорийных элементов, или 0 если нет подходящих элементов
     */
    public double получитьСреднююСтоимостьВысококалорийныхЭлементов(int минКалории) {
        if (минКалории < 0) {
            throw new IllegalArgumentException("Минимальные калории не могут быть отрицательными");
        }
        
        List<MenuItem> высококалорийныеЭлементы = new ArrayList<>();
        for (MenuItem элемент : элементыМеню) {
            if (элемент.getКалории() > минКалории) {
                высококалорийныеЭлементы.add(элемент);
            }
        }
        
        if (высококалорийныеЭлементы.isEmpty()) {
            return 0.0;
        }
        
        double общаяСтоимость = 0.0;
        for (MenuItem элемент : высококалорийныеЭлементы) {
            общаяСтоимость += элемент.getСтоимость();
        }
        
        return общаяСтоимость / высококалорийныеЭлементы.size();
    }
    
    /**
     * Возвращает количество элементов меню в сервисе.
     *
     * @return количество элементов меню
     */
    public int получитьКоличествоЭлементовМеню() {
        return элементыМеню.size();
    }
}